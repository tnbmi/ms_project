//*****************************************************************************
//
// プレイヤー [player.cpp]
// Author : YUTO HARADA
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "player.h"
#include "..\..\objectBase\fbxModel\fbxModel.h"

//=============================================================================
// コンストラクタ
//=============================================================================
Player::Player( FbxModel *parent,FbxModel *child )
{
	//----------------------------
	// メンバー初期化
	//----------------------------
	m_parent = parent;
	m_child  = child;
}

//=============================================================================
// デストラクタ
//=============================================================================
Player::~Player(void)
{
}

//=============================================================================
// 生成
//=============================================================================
bool Player::Create(Player** outPointer, FbxModel *parent,FbxModel *child )
{
	Player* pointer = new Player( parent,child );
	if(!pointer->Initialize())
		return false;

	*outPointer = pointer;
	return true;
}

//=============================================================================
// 初期化
//=============================================================================
bool Player::Initialize(void)
{
	//----------------------------
	// メンバ初期化
	//----------------------------
	m_pos = D3DXVECTOR3(0,0,0);
	m_rot = D3DXVECTOR3(0,0,0);
	m_scl = D3DXVECTOR3(1,1,1);
	m_offsetPos = D3DXVECTOR3(0,0,0);
	m_offsetRot = D3DXVECTOR3(0,0,0);
	return true;
}

//=============================================================================
// 終了
//=============================================================================
void Player::Finalize(void)
{

}

//=============================================================================
// 更新
//=============================================================================
void Player::Update(void)
{
	//親の位置更新
	m_parent->pos( m_pos );
	m_parent->rot( m_rot );
	m_parent->scl( m_scl );

	//子の位置更新
	m_child->pos( m_pos + m_offsetPos );
	m_child->rot( m_rot + m_offsetRot );
	m_child->scl( m_scl );
}

// EOF