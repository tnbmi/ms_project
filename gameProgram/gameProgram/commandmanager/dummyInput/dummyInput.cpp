//*****************************************************************************
//
// プレイヤー替え玉 [dummyInput.cpp]
// Author : MAI TANABE
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "dummyInput.h"
#include "..\..\common\safe.h"

#include "..\dummyData\dummyDataLoad.h"

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// マクロ定義
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
const char* _dummy_data = "./resources/command/dumData.txt";

//=============================================================================
// コンストラクタ
//=============================================================================
DummyInput::DummyInput(void)
{
	//----------------------------
	// メンバー初期化
	//----------------------------
	m_dummyDataLoad = nullptr;
}

//=============================================================================
// デストラクタ
//=============================================================================
DummyInput::~DummyInput(void)
{
}

//=============================================================================
// 生成
//=============================================================================
bool DummyInput::Create(DummyInput** outPointer, int patternMax)
{
	DummyInput* pointer = new DummyInput();
	if(!pointer->Initialize(patternMax))
		return false;

	*outPointer = pointer;
	return true;
}

//=============================================================================
// 初期化
//=============================================================================
bool DummyInput::Initialize(int patternMax)
{
	//----------------------------
	// 入力替え玉の読み込み
	//----------------------------
	DummyDataLoad::Create(&m_dummyDataLoad, _dummy_data, patternMax);

	return true;
}

//=============================================================================
// 終了
//=============================================================================
void DummyInput::Finalize(void)
{
	SafeFinalizeDelete(m_dummyDataLoad);
}

//=============================================================================
// 更新
//=============================================================================
void DummyInput::Update(void)
{
}

//=============================================================================
// 描画
//=============================================================================
void DummyInput::Draw(void)
{
}

// EOF
