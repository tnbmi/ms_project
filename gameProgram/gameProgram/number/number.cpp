//*****************************************************************************
//
// 数字用ポリゴン [number.cpp]
// Author : KEN MATSUURA
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "number.h"

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// マクロ定義
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
const int _num_default = 0;

//=============================================================================
// コンストラクタ
//=============================================================================
Number::Number(LPDIRECT3DDEVICE9 device, ObjectList* objectList, OBJECT_TYPE type) : Polygon2D(device, objectList, type)
{
	//----------------------------
	// メンバー初期化
	//----------------------------
}

//=============================================================================
// デストラクタ
//=============================================================================
Number::~Number(void)
{
}

//=============================================================================
// 生成
//=============================================================================
bool Number::Create(Number** outPointer, LPDIRECT3DDEVICE9 device, ObjectList* objectList, LPDIRECT3DTEXTURE9 texture, OBJECT_TYPE type)
{
	Number* pointer = new Number(device, objectList, type);
	if(!pointer->Initialize(texture))
		return false;

	*outPointer = pointer;
	return true;
}

//=============================================================================
// 初期化
//=============================================================================
bool Number::Initialize(LPDIRECT3DTEXTURE9 texture)
{
	//----------------------------
	// 継承元初期化
	//----------------------------
	Polygon2D::Initialize(texture);

	SetNumber(_num_default);

	return true;
}

//=============================================================================
// 終了
//=============================================================================
void Number::Finalize(void)
{
	//----------------------------
	// 継承元終了
	//----------------------------
	Polygon2D::Finalize();
}

//=============================================================================
// 更新
//=============================================================================
void Number::Update(void)
{
	//----------------------------
	// 継承元更新
	//----------------------------
	Polygon2D::Update();
}

//=============================================================================
// 描画
//=============================================================================
void Number::Draw(LPD3DXCONSTANTTABLE vsc, LPD3DXCONSTANTTABLE psc, D3DXMATRIX vp)
{
	//----------------------------
	// 継承元描画
	//----------------------------
	Polygon2D::Draw(vsc, psc, vp);
}

//=============================================================================
// 数字セット
//=============================================================================
void Number::SetNumber(int num)
{
	m_vtx[0].uv = D3DXVECTOR2( (float)( 0.0f + 0.1 * (num + 0.0f) ), 0.0f);
	m_vtx[1].uv = D3DXVECTOR2( (float)( 0.0f + 0.1 * (num + 1.0f) ), 0.0f);
	m_vtx[2].uv = D3DXVECTOR2( (float)( 0.0f + 0.1 * (num + 0.0f) ), 1.0f);
	m_vtx[3].uv = D3DXVECTOR2( (float)( 0.0f + 0.1 * (num + 1.0f) ), 1.0f);
}

// EOF
