//*****************************************************************************
//
// XInputゲームパッド入力管理 [padXManager.cpp]
// Author :MAI TANABE
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "padXManager.h"
#include "..\..\common\safe.h"

#include "padX.h"

//=============================================================================
// コンストラクタ
//=============================================================================
PadXManager::PadXManager(void)
{
	//----------------------------
	// メンバー初期化
	//----------------------------
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
	{
		m_pad[cnt] = nullptr;
	}
}

//=============================================================================
// デストラクタ
//=============================================================================
PadXManager::~PadXManager(void)
{
}

//=============================================================================
// 生成
//=============================================================================
bool PadXManager::Create(PadXManager** outPointer)
{
	PadXManager* pointer = new PadXManager();
	if(!pointer->Initialize())
		return false;

	*outPointer = pointer;
	return true;
}

//=============================================================================
// 初期化
//=============================================================================
bool PadXManager::Initialize(void)
{
	//----------------------------
	// パッド生成
	//----------------------------
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
		if(!PadX::Create(&m_pad[cnt], cnt))
			MessageBox(NULL, "PadXManager", "パッド生成時にエラーが発生しました。", MB_OK);

	return true;
}

//=============================================================================
// 終了
//=============================================================================
void PadXManager::Finalize(void)
{
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
		SafeFinalizeDelete(m_pad[cnt]);
}

//=============================================================================
// 更新
//=============================================================================
void PadXManager::Update(void)
{
	//----------------------------
	// パッド情報更新
	//----------------------------
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
		m_pad[cnt]->Update();
}

//=============================================================================
// デバッグ表示受け取り
//=============================================================================
void PadXManager::debugproc(Debugproc* debugproc)
{
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
		m_pad[cnt]->debugproc(debugproc);
}

//=============================================================================
// 入力の有無判定
//=============================================================================
bool PadXManager::InputChk(void)
{
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
		if(m_pad[cnt]->buttonTrigger(0xffff))
			return true;
	return false;
}

//=============================================================================
// 任意入力の有無判定
//=============================================================================
bool PadXManager::InputChk(WORD wButton)
{
	for(int cnt = 0; cnt < PAD_MAX; ++cnt)
		if(m_pad[cnt]->buttonTrigger(wButton))
			return true;
	return false;
}

// [EOF]
